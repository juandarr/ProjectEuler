"""
Finds the number of distinct terms in the sequence generated by a**b in a range of values
Author: Juan Rios
"""
import math

"""
Calculate the sequence length reducing the length when the number a is an nth power of a previous number
"""
def sequence_length(dimension):
    total_terms = 0
    for i in range(2,dimension+2):
        divisible_in_range = False
        for n in range(2, int(math.sqrt(i)+1)):
            if i%n==0:
                num = i
                div = 0
                while (num%n==0):
                    num //= n
                    div += 1
                if num==1:
                    divisible_in_range = True
                    break
        total_terms += dimension
        if divisible_in_range:
            exp = []
            for index in range(2,dimension+2):
                tmp = div*index
                for s in range(div-1,0,-1):
                    if tmp//s<dimension+2:
                        if tmp%s==0 and tmp not in exp:
                            total_terms -= 1
                            exp.append(tmp)
    return total_terms

"""
Calculate the sequence length using brute force
"""
def sequence_length_bf(dimension):
    values = {}
    length = 0
    for a in range(2,dimension+2):
        for b in range(2,dimension+2):
            value = a**b
            if value not in values:
                values[a**b]=1
                length +=1
    return length

if __name__ == "__main__":
    dimension = 99
    print('The sequence length generated for numbers a in b in dimension {0} is {1}'.format(dimension,sequence_length(dimension)))